(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{584:function(e,t,n){"use strict";n.r(t);var s=n(13),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("strong",[e._v("不要告诉D3如何去做, 而是告诉D3你想要的效果")]),e._v("。")]),e._v(" "),n("p",[e._v("你想要circle元素和数据一一对应, 那么你就不应该告诉D3去创建circle元素, 而是告诉D3: "),n("strong",[e._v('.selectAll("circle") 得到的circle集合应该和 .data(data) 一一对应')]),e._v("。 这个思想就叫做 Join。\n"),n("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/08/8b2f6021e60b0be3.png",alt:""}}),e._v("\n这是D3学习之路一定会看到的图。")]),e._v(" "),n("p",[e._v("从上图中可以看到:")]),e._v(" "),n("ul",[n("li",[e._v("数据集合 和 DOM元素集合 相交产生了中间的 update 集合")]),e._v(" "),n("li",[e._v("没有DOM元素与之对应的Data产生了左边的 enter 集合 (也就是缺失DOM元素)")]),e._v(" "),n("li",[e._v("同样的, 所有没有数据与之对应的DOM元素产生了右边的 exit 集合 (也就意味着这些DOM元素将被移除)")])]),e._v(" "),n("p",[e._v("现在我们可以再来看看使用 enter-append 模型的代码:")]),e._v(" "),n("ul",[n("li",[e._v('首先, svg.selectAll("circle") 返回的是一个空的集合, 因为当前 svg 容器还是空的。 这里的 svg 是所有后续创建的 circle元素的父节点。')]),e._v(" "),n("li",[e._v('svg.selectAll("circle") 返回的集合接下来和 data 进行 Join 操作, 得到的就是我们上面提到的三个集合: update 集合 , enter 集合 , exit 集合。 因为初始时 Elements集合(也就是circle集合)是空的, 所以 update 和 exit 集合为空, 而 enter 集合会自动为每一个新的data元素生成一个占位符。')]),e._v(" "),n("li",[e._v("默认 .data(data) 返回的是 update 集合, 因为 update 集合为空, 所以我们不对其进行操作, 这里我们调用 .enter() 得到 enter 集合。")]),e._v(" "),n("li",[e._v("接下来, 对于 enter 集合中的每一个元素, 我们使用 selection.append('circle') (值得注意的是, 对集合的操作会被应用到集合中的每一个元素上去)。 这样就为每一个数据点创建了一个 circle (这些circle都在他们的父节点 svg 中)")])]),e._v(" "),n("p",[e._v("用 Join 的方式来思考意味着, 我们要做的事情"),n("strong",[e._v("仅仅是声明 DOM集合(比如这里的 circle 集合) 和数据集合之间的关系")]),e._v(", 并且通过"),n("strong",[e._v("处理三个不同状态的集合 enter,update,exit")]),e._v("来描述这种关系。")]),e._v(" "),n("p",[e._v("现在我们的代码还只是处理了 enter 的部分, 这部分对于展示静态的数据已经足够了, 但如果你想进行动态的数据展示, 这种 Join 的方式将大大简化你的工作, 你只需要对 update 和 exit 进行很少的操作就能得到你想要的效果. 这也意味着你可以轻松的展示实时数据, 能够为用户添加动态的交互, 能平滑的切换不同的展示数据集。")]),e._v(" "),n("p",[e._v("下面这段代码展示了对于 exit 和 update 集合的处理:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var circle = svg.selectAll("circle")\n  .data(data);\n\ncircle.exit().remove();\n\ncircle.enter().append("circle")\n    .attr("r", 2.5)\n  .merge(circle)\n    .attr("cx", function(d) { return d.x; })\n    .attr("cy", function(d) { return d.y; });\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("无论什么时候上面的这段代码被执行, 它都将重新计算 Join 并且维护好 DOM元素集合 和 数据集合 之间的对应关系. 如果你的新数据集比之前老的数据集要小, 多余的DOM元素就会进入 exit 集合, 然后被 remove掉. 如果新的数据集比老的大, 那么新的数据就将进入 enter 集合, 并创建出新的DOM元素. 如果新的数据集和老的数目相同, 那么只有 update 集合会被更新坐标。")]),e._v(" "),n("p",[e._v("使用 Join 的思想能让我们的代码更加直观. 你只需要处理好这三种状态的集合, 而不需要 if 和 for 来进行复杂的逻辑判断. 你"),n("strong",[e._v("只需要描述好你的数据集合和DOM集合想要有怎样的对应关系")]),e._v("。")]),e._v(" "),n("p",[e._v("Join 还让你可以对不同状态的DOM元素进行不同的操作. 比如, 你可以只对 enter 集合进行操作, 这样就不会每次都对所有的 DOM元素进行更新, 这能显著的提升你的数据可视化作品的渲染效率。")]),e._v(" "),n("p",[e._v("同样的, 你也可以给 exit 的集合添加 缩小隐藏 的效果:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('circle.exit().transition()\n    .attr("r", 0)\n    .remove();\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);